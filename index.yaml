openapi: 3.0.0
info:
  description: |
    API de produtos perecíveis.
    Encontra aqui os produtos perecíveis que estão perto do fim de validade e contribui para a redução de alimentos desperdiçados
    url: https://virtserver.swaggerhub.co
  version: "1.0.0"
  title: Gestão de Produtos Perecíveis
  termsOfService: 'http://swagger.io/terms/'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: /
tags:
  - name: produto
    description: Operação de produtos perecíveis
  - name: utilizador
    description: Operação dos utilizadores
paths:
  /produto:
    post:
      tags:
        - produto
      summary: Adicionar um novo produto
      operationId: postProduto
      responses:
        '200':
          description: Produto adicionado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Produto'
            application/xml:
              schema:
                $ref: '#/components/schemas/Produto'
        '400':
          description: Request body do produto invalido
        '401':
          description: Sem autorização
      security:
      - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/Produto'
    get:
      tags: 
        - produto
      summary: Listar todos os produtos
      description: Retorna todos os produtos na base dados
      operationId: getListProdutos
      responses:
        '200':
          description: Lista de produtos enviados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListaProdutos'
            application/xml:
              schema:
                $ref: '#/components/schemas/ListaProdutos'
        '400':
          description: Erro ao enviar lista
        '404':
          description: Não existem produtos na base de dados
  '/produto/{produtoId}':
    get:
      tags:
        - produto
      summary: Encontrar um produto pelo produtoId
      description: Retorna um único produto mais detalhado
      operationId: getProduto
      parameters:
        - name: produtoId
          in: path
          description: produtoId necessário
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Produto enviado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Produto'
            application/xml:
              schema:
                $ref: '#/components/schemas/Produto'
        '400':
          description: Erro no envio da informação do produto
        '404':
          description: Produto não encontrado {produtoId invalido}
    put:
      tags:
        - produto
      summary: Atualizar um produto através do produtoId
      description: Atualiza um produto
      operationId: putProduto
      parameters:
        - name: produtoId
          in: path
          description: produtoId necessário
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Produto atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Produto'
            application/xml:
              schema:
                $ref: '#/components/schemas/Produto'
        '400':
          description:   Erro na atualização do produto
        '404':
          description: Produto não encontrado {produtoId invalido}
      security:
      - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/Produto'
    delete:
      tags:
        - produto
      summary: Eliminar um produto pelo produtoId
      operationId: deleteProduto
      parameters:
        - name: produtoId
          in: path
          description: produtoId necessário para eliminar
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Produto eliminado com sucesso
        '400':
          description: produtoId invalido
        '404':
          description: Produto não encontrado
      security:
      - bearerAuth: []
  /produto/listPrecoMedio:
    get:
      tags: 
        - produto
      summary: Listar produtos com o preço medio
      description: Retorna todos os produtos e o seu preço medio
      operationId: getListPrecoMedio
      responses:
        '200':
          description: Lista dos produtos com o preco medio enviado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListaPrecoMedio'
            application/xml:
              schema:
                $ref: '#/components/schemas/ListaPrecoMedio'
        '400':
          description: Erro ao enviar a lista
        '404':
          description: Não existem produtos na base dados
  '/produto/findByCategoria/{categoria}':
    get:
      tags:
        - produto
      summary: Encontrar produtos por categoria
      description: Múltiplos produtos enviados consoante a categoria selecionada
      operationId: getProdutoByCategoria
      parameters:
        - name: categoria
          in: path
          description: É necessário o envio da categoria para puder ser enviado a lista de produtos correta
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
              default: todos
      responses:
        '200':
          description: Lista de produtos enviado consoante a categoria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListaProdutos'
            application/xml:
              schema:
                $ref: '#/components/schemas/ListaProdutos'
        '400':
          description: Invalido
        '404':
          description: Categoria não foi encontrado
  /produto/listarNaoDesperdicados:
    get:
      tags:
        - produto
      summary: Listar todos os produtos e as suas quantidades não desperdiçadas
      description: Listar todos os produtos e as suas quantidades não desperdiçadas, divido por peso liquido e peso bruto
      operationId: getListProdutosNaoDesperdicados
      responses:
        '200':
          description: Lista de produtos não desperdicados enviada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListaProdutosNaoDesperdicados'
            application/xml:
              schema:
                $ref: '#/components/schemas/ListaProdutosNaoDesperdicados'
        '400':
          description: Erro ao enviar a lista
        '404':
          description: Não existe produtos na base de dados
  /produto/associarProdutoUtilizador:
    post:
      tags: 
        - produto
      summary: Associar um produto ao cliente
      description: Associar um ou mais produtos a lista de favoritos do cliente
      operationId: postAssociarProdutoCliente
      responses:
        '200':
          description: Associação feita com sucesso
        '400':
          description: Erro
        '404':
          description: Utilizador invalido
      security:
      - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssociarProdutoCliente'
          application/xml:
            schema:
              $ref: '#/components/schemas/AssociarProdutoCliente'
  '/produto/associarProdutoUtilizador/{utilizadorId}':
    get:
      tags: 
        - produto
      summary: Listar produtos favoritos do utilizador
      description: Lista com algum detalhe os produtos favoritos do utilizador
      operationId: getListarAssociarProdutoUtilizador
      parameters:
        - name: utilizadorId
          in: path
          description: É necessário o envio do utilizadorId para puder ser enviado a lista de produtos correta
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Enviada a lista com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListaProdutosAssociados'
            application/xml:
              schema:
                $ref: '#/components/schemas/ListaProdutosAssociados'
        '400':
          description: Erro
        '404':
          description: Utilizador não foi encontrado
      security:
      - bearerAuth: []
  /utilizador:
    post:
      tags:
        - utilizador
      summary: Criar utilizador
      description: Criação de um novo utilizador
      operationId: postUtilizador
      responses:
        '200':
          description: Utilizador criado com sucesso
        '400':
          description: Erro na criacao de um utilizador
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Utilizador'
          application/xml:
            schema:
              $ref: '#/components/schemas/Utilizador'
        required: true
    get:
      tags:
        - utilizador
      summary: Login do utilizador
      operationId: getUtilizador
      parameters:
        - name: utilizador
          in: query
          description: nome do utilizador
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: palavra passe do utilizador
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Utilizador logado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Utilizador'
            application/xml:
              schema:
                $ref: '#/components/schemas/Utilizador'
        '400':
          description: Utilizador invalido
  /utilizador/{email}/logout:
    get:
      tags:
        - utilizador
      summary: Logout do utilizador
      operationId: logoutUtilizador
      parameters:
        - name: email
          in: path
          description: Necessário enviar o email do utilizador pretendido
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Logout efetuado com sucesso
        '400':
          description: Input invalido
        '404':
          description: Utilizador não existe
      security:
      - bearerAuth: []
  '/utilizador/{email}':
    get:
      tags:
        - utilizador
      summary: Encontrar utilizador
      operationId: getUtilizadorByEmail
      parameters:
        - name: email
          in: path
          description: Necessário enviar o email do utilizador pretendido
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Enviado utilizador coom sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Utilizador'
            application/xml:
              schema:
                $ref: '#/components/schemas/Utilizador'
        '400':
          description: Erro ao enviar o utilizador
        '404':
          description: Utilizador não encontrado
      security:
      - bearerAuth: []
    patch:
      tags:
        - utilizador
      summary: Updated utilizador do tipo de utilizador
      description: Atualizar um tipo de utilizador
      operationId: patchUtilizador
      parameters:
        - name: email
          in: path
          description: email do utilizador necessário
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Atualizado utilizador com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UtilizadorChangeTipo'
            application/xml:
              schema:
                $ref: '#/components/schemas/UtilizadorChangeTipo'
        '400':
          description: Erro ao atualizar
        '404':
          description: Utilizador não foi encontrado
      security:
      - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UtilizadorChangeTipo'
          application/xml:
            schema:
              $ref: '#/components/schemas/UtilizadorChangeTipo'
        required: true
    put:
      tags:
        - utilizador
      summary: Atualiza um utilizador
      description: Atualiza um utilizador, com base no requestBody
      operationId: putUtilizador
      parameters:
        - name: email
          in: path
          description: email do utilizador necessário
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Utilizador atualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Utilizador'
            application/xml:
              schema:
                $ref: '#/components/schemas/Utilizador'
        '400':
          description: Input invalido
        '403':
          description: Sem autorização
        '404':
          description: Utilizador não existe
      security:
      - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Utilizador'
          application/xml:
            schema:
              $ref: '#/components/schemas/Utilizador'
        required: true
    delete:
      tags:
        - utilizador
      summary: Eliminar utilizador
      description: So consegue ser realizado por um utilizador logado
      operationId: deleteUtilizador
      parameters:
        - name: email
          in: path
          description: email necessário
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Eliminado com sucesso
        '400':
          description: Erro
        '404':
          description: Utilizador não encontrado
      security:
      - bearerAuth: []
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
#inicio dos componentes que depois referenciamos /components/schemas/oQueQuisermosReferenciar
components:
  schemas:
    #json produto 
    Produto:
      type: object
      properties:
        produtoId:
          type: integer
        nome:
          type: string
        categoria:
          $ref: '#/components/schemas/Categoria'
        informacao:
          $ref: '#/components/schemas/Informacao'
        precoUnitario:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: true
        precoPromocional:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: true
        percentagemDesconto:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: true
        precoKilo:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: true
        informacaoNutricional:
          $ref: '#/components/schemas/InformacaoNutricional'
        origem: 
          type: string
        nutricaoPontuacao:
          type: string
        data: 
          $ref: '#/components/schemas/Data'
        codigoBarras:
          type: integer
      required: 
        - produtoId
        - nome
        - categoria
        - informacao
        - precoUnitario
        - precoPromocional
        - percentagemDesconto
        - precoKilo
        - informacaoNutricional
        - origem
        - nutricaoPontuacao
        - data
        - codigoBarras
      #xml produto
      xml:
        name: Produto
    #json informacao
    Informacao:
      type: object
      properties:
        id:
          type: integer
        informacaoCurta:
          type: string
          maxLength: 150
        informacaoComprida:
          type: string
      required:
        - id
      xml: 
        name: informacao
    # json referencia detalhe
    Detalhe:
      type: object
      properties:
        id:
          type: integer
        nome:
          type: string
        descricao:
          type: string
        codigo: 
          type: integer
        precoUnitario:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: true
        precoKilo:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: true
      required:
        - id
        - nome
        - descricao
        - codigo
        - precoUnitario
        - precoKilo
      xml: 
        name: detalhe  
    #json referencia categoria
    Categoria:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
      required: 
        - id
        - name
      #xml categoria
      xml:
        name: Categoria
    #json informacao nutricional
    InformacaoNutricional:
      type: object
      properties:
        id:
          type: integer
        peso:
          type: integer
          minimum: 0
          exclusiveMinimum: true
        energia:
          type: number
          format: double
          minimum: 0
        lipidos:
          type: number
          format: double
          minimum: 0
        saturados:
          type: number
          format: double
          minimum: 0
        hidratosDeCarbono:
          type: number
          format: double
          minimum: 0
        acucar:
          type: number
          format: double
          minimum: 0
        proteina:
          type: number
          format: double
          minimum: 0
        sal:
          type: number
          format: double
          minimum: 0
      required:
        - id
        - peso
        - energia
        - lipidos
        - hidratosDeCarbono
        - acucar
        - proteina
      xml:
        name: informacaoNutricional
    #json referencia data
    Data:
      type: object
      properties:
        id: 
          type: integer
        dataValidade:
          type: string
          pattern: /([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/
        dataProducao:
          type: string
          pattern: /([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/
      required:
        - id
        - dataValidade
        - dataProducao
      #xml categoria
      xml:
        name: data
    #json PrecoMedio
    ListaPrecoMedio:
      type: array
      minItems: 0
      items:
        type: object
        properties:
          produtoId:
            type: integer
          precoMedio:
            type: number
            format: double
            minimum: 0
            exclusiveMinimum: true
          detalhe:
            $ref: '#/components/schemas/Detalhe'
        required:
          - produtoId
          - precoMedio
      #xml PrecoMedio   
      xml:
        name: ListaPrecoMedio
    #json lista de produtos para venda
    ListaProdutos:
      type: array
      minItems: 0
      items:
        type: object
        properties:
          produto:
            $ref: '#/components/schemas/Produto'
      required:
        - produto
      #xml produto
      xml:
        name: Produto
    #json associas produto ao cliente
    AssociarProdutoCliente:
      type: object
      properties:
        utilizadorId:
          type: integer
        listaProduto: 
          type: array
          minItems: 1
          uniqueItems: true
          items:
            type: object
            properties:
              produtoId:
                type: integer
            required: 
              - produtoId
      required:
        - utilizadorId
      #xml associas produto ao cliente
      xml:
        name: AssociarProdutoCliente
    #json lista Produtos Associados
    ListaProdutosAssociados:
      type: object
      properties:
        utilizadorId:
          type: integer
        listaProduto: 
          type: array
          minItems: 0
          items:
            type: object
            properties:
              produto:
                $ref: '#/components/schemas/Detalhe'
            required: 
              - produto
      required:
        - utilizadorId
      #xml lista Produtos Associados
      xml:
        name: ListaProdutosAssociados
    #json lista Produtos nao desperdicados
    ListaProdutosNaoDesperdicados:
      type: array
      minItems: 0
      items:
        properties:
          produtoId:
            type: integer
          nome: 
            type: string
          valorPoupado: 
            type: number
            format: double
            minimum: 0
            exclusiveMinimum: true
          quantidadeNaoDesperdicada:
            type: number
            format: double
            minimum: 0
            exclusiveMinimum: true
          pesoLiquidoNaoDesperdicado:
            type: number
            format: double
            minimum: 0
            exclusiveMinimum: true
          mediaDesconto:
            type: number
            format: double
            minimum: 0
            exclusiveMinimum: true
        required:
          - produtoId
          - nome
          - valorPoupado
          - quantidadeNaoDesperdicada
          - pesoLiquidoNaoDesperdicado
          - mediaDesconto
      #xml lista Produtos nao desperdicados
      xml:
        name: ListaProdutosNaoDesperdicados
    #json utilizador criar conta
    Utilizador:
      type: object
      properties:
        nome:
          type: string
        apelido:
          type: string
        email:
          type: string
          format: email
          example: user@exemple.com
        password:
          type: string
        contacto:
          type: string
          pattern: '[9]{1}[0-9]{2}[0-9]{3}[0-9]{3}$'
      required:
        - nome
        - apelido
        - email
        - password
      #xml utilizador criar conta
      xml:
        name: Utilizador
    UtilizadorChangeTipo:
      type: object
      properties:
        tipo:
          type: string
          enum:
            - utilizador
            - admin
      required:
        - tipo
    #json utilizador iniciar sessão
    Login:
      type: object
      properties:
        email:
          type: string
          format: email
          example: user@exemple.com
        password:
          type: string
      required:
        - email
        - password
      #xml utilizador iniciar sessão
      xml:
        name: Login
  requestBodies:
    Produto:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Produto'
        application/xml:
          schema:
            $ref: '#/components/schemas/Produto'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT